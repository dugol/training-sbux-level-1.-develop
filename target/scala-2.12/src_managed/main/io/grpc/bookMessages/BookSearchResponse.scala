// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.bookMessages



@SerialVersionUID(0L)
final case class BookSearchResponse(
    isbn: String = "",
    tittle: String = "",
    author: String = "",
    gender: String = "",
    publisher: String = "",
    country: String = "",
    edition: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[BookSearchResponse] with com.trueaccord.lenses.Updatable[BookSearchResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (isbn != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, isbn) }
      if (tittle != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, tittle) }
      if (author != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, author) }
      if (gender != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, gender) }
      if (publisher != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, publisher) }
      if (country != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, country) }
      if (edition != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, edition) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = isbn
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = tittle
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = author
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = gender
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = publisher
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = country
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = edition
        if (__v != 0) {
          _output__.writeInt32(7, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.bookMessages.BookSearchResponse = {
      var __isbn = this.isbn
      var __tittle = this.tittle
      var __author = this.author
      var __gender = this.gender
      var __publisher = this.publisher
      var __country = this.country
      var __edition = this.edition
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __isbn = _input__.readString()
          case 18 =>
            __tittle = _input__.readString()
          case 26 =>
            __author = _input__.readString()
          case 34 =>
            __gender = _input__.readString()
          case 42 =>
            __publisher = _input__.readString()
          case 50 =>
            __country = _input__.readString()
          case 56 =>
            __edition = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.bookMessages.BookSearchResponse(
          isbn = __isbn,
          tittle = __tittle,
          author = __author,
          gender = __gender,
          publisher = __publisher,
          country = __country,
          edition = __edition
      )
    }
    def withIsbn(__v: String): BookSearchResponse = copy(isbn = __v)
    def withTittle(__v: String): BookSearchResponse = copy(tittle = __v)
    def withAuthor(__v: String): BookSearchResponse = copy(author = __v)
    def withGender(__v: String): BookSearchResponse = copy(gender = __v)
    def withPublisher(__v: String): BookSearchResponse = copy(publisher = __v)
    def withCountry(__v: String): BookSearchResponse = copy(country = __v)
    def withEdition(__v: Int): BookSearchResponse = copy(edition = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = isbn
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = tittle
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = author
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = gender
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = publisher
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = country
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = edition
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(isbn)
        case 2 => _root_.scalapb.descriptors.PString(tittle)
        case 3 => _root_.scalapb.descriptors.PString(author)
        case 4 => _root_.scalapb.descriptors.PString(gender)
        case 5 => _root_.scalapb.descriptors.PString(publisher)
        case 6 => _root_.scalapb.descriptors.PString(country)
        case 7 => _root_.scalapb.descriptors.PInt(edition)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.bookMessages.BookSearchResponse
}

object BookSearchResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[io.grpc.bookMessages.BookSearchResponse] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[io.grpc.bookMessages.BookSearchResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): io.grpc.bookMessages.BookSearchResponse = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.bookMessages.BookSearchResponse(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.bookMessages.BookSearchResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.bookMessages.BookSearchResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BookMessagesProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BookMessagesProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.bookMessages.BookSearchResponse(
  )
  implicit class BookSearchResponseLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, io.grpc.bookMessages.BookSearchResponse]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, io.grpc.bookMessages.BookSearchResponse](_l) {
    def isbn: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.isbn)((c_, f_) => c_.copy(isbn = f_))
    def tittle: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.tittle)((c_, f_) => c_.copy(tittle = f_))
    def author: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.author)((c_, f_) => c_.copy(author = f_))
    def gender: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.gender)((c_, f_) => c_.copy(gender = f_))
    def publisher: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.publisher)((c_, f_) => c_.copy(publisher = f_))
    def country: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.country)((c_, f_) => c_.copy(country = f_))
    def edition: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.edition)((c_, f_) => c_.copy(edition = f_))
  }
  final val ISBN_FIELD_NUMBER = 1
  final val TITTLE_FIELD_NUMBER = 2
  final val AUTHOR_FIELD_NUMBER = 3
  final val GENDER_FIELD_NUMBER = 4
  final val PUBLISHER_FIELD_NUMBER = 5
  final val COUNTRY_FIELD_NUMBER = 6
  final val EDITION_FIELD_NUMBER = 7
}
