// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package myproto.test



@SerialVersionUID(0L)
final case class Test(
    foo: scala.Option[Int] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Test] with com.trueaccord.lenses.Updatable[Test] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (foo.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, foo.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      foo.foreach { __v =>
        _output__.writeInt32(1, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): myproto.test.Test = {
      var __foo = this.foo
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __foo = Some(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      myproto.test.Test(
          foo = __foo
      )
    }
    def getFoo: Int = foo.getOrElse(0)
    def clearFoo: Test = copy(foo = None)
    def withFoo(__v: Int): Test = copy(foo = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => foo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => foo.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = myproto.test.Test
}

object Test extends com.trueaccord.scalapb.GeneratedMessageCompanion[myproto.test.Test] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[myproto.test.Test] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): myproto.test.Test = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    myproto.test.Test(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[myproto.test.Test] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      myproto.test.Test(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = myproto.test.Test(
  )
  implicit class TestLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, myproto.test.Test]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, myproto.test.Test](_l) {
    def foo: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getFoo)((c_, f_) => c_.copy(foo = Some(f_)))
    def optionalFoo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.foo)((c_, f_) => c_.copy(foo = f_))
  }
  final val FOO_FIELD_NUMBER = 1
}
